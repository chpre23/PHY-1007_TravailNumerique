import numpy as np

from src.coordinate_and_position import CoordinateSystem
from src.fields import ScalarField



class LaplaceEquationSolver:
    """
    A Laplace equation solver used to compute the resultant constant_voltage field P in 2D-space generated by a constant
    voltage field V (for example due to wires).
    """

    def __init__(self, nb_iterations: int = 1000):
        """
        Laplace solver constructor. Used to define the number of iterations for the relaxation method.

        Parameters
        ----------
        nb_iterations : int
            Number of iterations performed to obtain the constant_voltage by the relaxation method (default = 1000).
        """
        self.nb_iterations = nb_iterations

    def _solve_in_cartesian_coordinate(
            self,
            constant_voltage: ScalarField,
            delta_x: float,
            delta_y: float
    ) -> ScalarField:
        """
        Solve the Laplace equation to compute the resultant constant_voltage field P in 2D-space.

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ ; (x, y) → V(x, y), where V(x, y) is the electrical components' voltage at a
            given point (x, y) in space.
        delta_x : float
            Small discretization of the x-axis.
        delta_y : float
            Small discretization of the y-axis.

        Returns
        -------
        constant_voltage : ScalarField
            A scalar field P : ℝ² → ℝ ; (x, y) → P(x, y), where P(x, y) is the electric constant_voltage at a given point
            (x, y) in space. The difference between P and V is that P gives the constant_voltage in the whole world, i.e inside
            the electrical components and in the empty space between the electrical components, while the field V
            always gives V(x, y) = 0 if (x, y) is not a point belonging to an electrical component of the circuit.
        """
#        matrix = constant_voltage
#        max_iter = 10000  # Maximum number of iterations
#        tolerance = 1e-5  # Convergence tolerance
#        for iteration in range(max_iter):
#            old_matrix = matrix.copy()
#            for i in range(1, nx-1):
#                for j in range(1, ny-1):
#                    matrix[i, j] = 0.25*(old_matrix[i-1, j] + old_matrix[i+1, j] + old_matrix[i, j-1] + old_matrix[i, j+1])
            #error = np.max(np.abs(matrix - old_matrix))
            #if error < tolerance:
                #print(f"Converged after {iteration} iterations with an error of {error:.6f}")
                #break
        tol=1e-6
        w=1
        nx, ny = constant_voltage.shape
        dx2 = delta_x ** 2
        dy2 = delta_y ** 2
        denom = 2*(dx2 + dy2)
        error = tol + 1  # initialize error larger than tol
        iteration = 0
        while error > tol and iteration < self.nb_iterations:
            error = 0
            for i in range(1, nx-1):
                for j in range(1, ny-1):
                    left = constant_voltage[i-1, j]
                    right = constant_voltage[i+1, j]
                    up = constant_voltage[i, j-1]
                    down = constant_voltage[i, j+1]
                    old_value = constant_voltage[i, j]
                    new_value = ((1-w)*old_value) + ((w/denom)*(left + right + up + down))
                    constant_voltage[i, j] = new_value
                    error = max(error, abs(new_value - old_value))
            iteration += 1
        return constant_voltage
        #raise NotImplementedError

    def _solve_in_polar_coordinate(
            self,
            constant_voltage: ScalarField,
            delta_r: float,
            delta_theta: float
    ) -> ScalarField:
        """
        Solve the Laplace equation to compute the resultant constant_voltage field P in 2D-space.

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ ; (r, θ) → V(r, θ), where V(r, θ) is the electrical components' voltage at a
            given point (r, θ) in space.
        delta_r : float
            Small discretization of the r-axis.
        delta_theta : float
            Small discretization of the θ-axis.

        Returns
        -------
        constant_voltage : ScalarField
            A scalar field P : ℝ² → ℝ ; (r, θ) → P(r, θ), where P(r, θ) is the electric constant_voltage at a given point
            (r, θ) in space. The difference between P and V is that P gives the constant_voltage in the whole world, i.e inside
            the electrical components and in the empty space between the electrical components, while the field V
            always gives V(r, θ) = 0 if (r, θ) is not a point belonging to an electrical component of the circuit.
        """
        w=1
        tol=1e-6
        nr, ntheta = constant_voltage.shape
        dr2 = delta_r**2
        dtheta2 = delta_theta**2
        denom = 2*(dr2 + dtheta2)
        error = tol + 1  # initialize error larger than tol
        iteration = 0
        while error > tol and iteration < self.nb_iterations:
            error = 0
            for i in range(1, nr-1):
                for j in range(1, ntheta-1):
                    left = constant_voltage[i, j-1]
                    right = constant_voltage[i, j+1]
                    up = constant_voltage[i-1, j]
                    down = constant_voltage[i+1, j]
                    old_value = constant_voltage[i, j]
                    new_value = (1-w)*old_value + w/denom*((left + right)/dtheta2 + (up + down)/dr2) # P-E un facteur de r^2 selon chatGPT
                    constant_voltage[i, j] = new_value
                    error = max(error, abs(new_value - old_value))
            iteration += 1
        return constant_voltage
        #raise NotImplementedError

    def solve(
            self,
            constant_voltage: ScalarField,
            coordinate_system: CoordinateSystem,
            delta_q1: float,
            delta_q2: float
    ) -> ScalarField:
        """
        Solve the Laplace equation to compute the resultant constant_voltage field P in 2D-space.

        Parameters
        ----------
        constant_voltage : ScalarField
            A scalar field V : ℝ² → ℝ representing a constant voltage field.
        coordinate_system : CoordinateSystem
            Coordinate system.
        delta_q1 : float
            Small discretization of the first axis.
        delta_q2 : float
            Small discretization of the second axis.

        Returns
        -------
        constant_voltage : ScalarField
            A scalar field P : ℝ² → ℝ  representing the constant_voltage in the 2D world.
        """
        if coordinate_system == CoordinateSystem.CARTESIAN:
            return self._solve_in_cartesian_coordinate(constant_voltage, delta_q1, delta_q2)
        elif coordinate_system == CoordinateSystem.POLAR:
            return self._solve_in_polar_coordinate(constant_voltage, delta_q1, delta_q2)
        else:
            raise NotImplementedError("Only the cartesian and polar coordinates system are implemented.")
